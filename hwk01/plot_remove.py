import comp182
import provided
import connected_components
import random

network = comp182.read_graph('rf7.repr')
random1 = provided.upa(1347,5)
random2 = provided.erdos_renyi(1347, float(6224)/float(906531))

def random_remove(g):
    """
    #remove one node from graph randomly
    #argument:
        g -- graph
    #return:
        a graph with a node removed
    """
    random_node = random.sample(g,1)[0] # choose random node
    g.pop(random_node,None) # remove node
    for node in g:
        if g[node] & {random_node} == {random_node}:
            g[node].remove(random_node)
    return g
# test for random_remove
#test1 = random_remove(provided.upa(5,2))

def plot_remove(g):
    """
    #remove the node with largest cut,
     plot the size of connected components 
     with respect to number of nodes removed.
     Two methods: target & random remove
    #argument:
        g           -- graph
    #return:
        a list of dictionaries, keys are the 
        number of nodes removed, values are
        the largest CC of each graph
    """
    graph1 = comp182.copy_graph(g)
    graph2 = comp182.copy_graph(g)
    ############################
    # target remove
    result1 = {}
    nodeRemoved = 0
    # create an array of nodes from max cut to min cut
    nodeToBeRemoved = sorted(graph1, key = lambda node:len(graph1[node]), reverse = True)
    CC = connected_components.connected_components(graph1) 
    CC.sort(key=len,reverse=True) # sort CC from biggest to smallest
    result1[0] = len(CC[0]) # add biggest CC to the original graph
    while (nodeRemoved < len(graph1)):
        nodeRemoved += 1
        remove_node = nodeToBeRemoved[0]
        graph1.pop(remove_node,None) # remove node, update g
        for node in graph1:
            if graph1[node] & {remove_node} == {remove_node}:
                graph1[node].remove(remove_node)
        nodeToBeRemoved.remove(remove_node)
        CC = connected_components.connected_components(graph1) 
        CC.sort(key=len,reverse=True) # sort CC from biggest to smallest
        result1[nodeRemoved] = len(CC[0]) # add biggest CC to the original graph
    
    ##########################
    # random remove    
    result2 = {}
    nodeRemoved = 0
    CC = connected_components.connected_components(graph2) 
    CC.sort(key=len,reverse=True) # sort CC from biggest to smallest
    result1[0] = len(CC[0]) # add biggest CC to the original graph
    
    while (nodeRemoved < len(graph2)):
        nodeRemoved += 1
        graph2 = random_remove(graph2)
        CC = connected_components.connected_components(graph2) 
        CC.sort(key=len,reverse=True) # sort CC from biggest to smallest
        result2[nodeRemoved] = len(CC[0]) # add biggest CC to the original graph
        
    #############################
    # plot
    result = [result1, result2] # target, then random
    return result

# plot for graph network
xlabel = 'number of nodes removed'
ylabel = 'size of largest connected components'
labels = ['target remove','random remove']
#result1 = plot_remove(network)
result2 = plot_remove(random1)
result3 = plot_remove(random2)
#comp182.plot_lines(result1, "network plot", xlabel, ylabel, labels, filename='network_plot')
comp182.plot_lines(result2, "plot on graph generated by upa algorithm", 
                    xlabel, ylabel, labels, filename='upa_plot')
comp182.plot_lines(result2, "plot on graph generated by erdos renyi algorithm", 
                    xlabel, ylabel, labels, filename='erdos_renyi_plot')